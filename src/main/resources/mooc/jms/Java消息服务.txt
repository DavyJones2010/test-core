第三章: 深入剖析一条JMS消息
* 疑问:
	* P2P与P2S的消息有严格的顺序么?
		* P2P: 队列会按照消息服务器将消息放入队列的顺序,把他们传送给消费者.
	* 消息的类别:
		* 按照是否可持久分类:
			* 持久性消息: 会在JMS提供者出现故障(重新启动)后继续存在.
			* 非持久性消息: 会在JMS提供者出现故障(重新启动)后销毁.
		
* JMS消息组成部分:
	1. 消息头
		1. JMSDestination
		2. JMSDeliveryMode
		3. JMSMessageID
		4. JMSTimestamp
		5. JMSExpiration
		6. JMSRedelivered
		7. JMSPriority
		8. JMSReplyTo
		9. JMSCorrelationID
		10. JMSType
	2. 消息属性
	3. 消息体:
		1. 结构化消息体: StreamMessage, BytesMessage
		2. 非结构化消息体: TextMessage, ObjectMessage, MapMessage

* JMS消息头:@org.exolab.jms.message.MessageHeader
	* 对应每部分都getter/setter方法
	* 可以分为两类:
		* 自动分配的消息头: 对大多数自动分配的消息头来说,开发者使用的setter方法是无效的.
		* 开发者分配的消息头:
	* JMSDestination: 一个Topic或者一个Queue对象来标识目的地,两者都是
	
* P2P消息模式:
	* 同一个队列里可能会有多个消费者在同时监听同一消息,但只有一个消费者会接收到该消息.
	* 消息存在先后顺序.
	* 队列里的消息该如何发给消费者,取决于JMS提供者的策略.
	一些JMS Broker会使用负载均衡技术在消费者中均匀发布消息.而其他JMS Broker可能会使用更为随机的策略.
	* 消息可以是持久性的,也可以是非持久性的.
	* P2P传送模型:
		* 异步即发即弃(fire-and-forget): producer向队列发送消息,不期望接收响应.
		通常用于
			1. 向日志记录系统发送消息
			2. 请求启动一个报告
			3. 触发另一个进程中的某个事件
		* 异步请求/应答(block-wait): producer向队列发送消息,阻塞等待应答队列.
	* 优势:
		1. 有QueueBrowser,允许JMS客户端对队列进行快照,以查看正在等待被消费的消息.P2S则没有这种特性.
		2. 使用基于消息的负载均衡,可以让服务端的组件实现更大的吞吐量.
	* 场景: 同一个系统不同组件之间需要进行同步通信,而那些组件是用不同语言编写而成,或者是在不同的技术平台.
	* Selector作用: 当一个msg不满足selector规定的信息时,不会被该consumer消费,会一直驻留在queue中.
	* 在使用请求/应答模型时需要确认: 接收的相应同发送的原始消息相互关联. 
	消息关联就是用于确保接收正确消息的一项技术. 最常用的消息关联方式: 将JMSCorrelationID与JMSMessageID关联.
* 动态队列与受管队列:
	* 动态队列: 可以在程序中使用JMS API创建与销毁的队列.例如QueueSession.createQueue()方法
	* 受管队列: 使用JMS厂商的Admin console工具创建的队列.
* 多个接收者实现负载均衡:
	* 一个队列可能有多个接收者. JMS规范规定必须由JMS Broker来实现这种功能.
	* 负载均衡算法: 1) 轮询调度(round-robin) 2) 第一个可用(first-available)均衡模式

* 内部目的地拓扑结构: 应用服务器既用作应用服务器,又用作JMS服务器.
	* 缺点:
		* 会将生产者&消费者限定为JAVA这一平台上
		* 导致应用服务器自身系统速度变慢,产生严重的系统瓶颈.消息传送服务花费大量系统资源,特别是CPU和可用线程数.
		* 导致消息服务器的可用性降低.
	* 应用场景:
		* 基于java的自包含应用程序,它利用消息传送来对内部组件解耦,进而降低系统瓶颈,提高可伸缩性和吞吐量.
* 外部目的地拓扑结构: JMS提供者会被部署为专用服务器,该服务器独立于所有应用程序服务器.可以部署在单独物理机器上,也可以与应用服务器共同部署在同一台机器上.
	* 应用场景:
		* 消息吞吐量大的系统,例如每秒3000条消息.

* 消息传送反模式:
	* 单用途队列
	* 过度使用消息优先级
	* 滥用消息头
SSL->Secure Socket Layer
	
	